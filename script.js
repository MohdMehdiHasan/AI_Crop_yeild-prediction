// --- CONFIGURATION ---
const SUPABASE_URL = 'https://ojdhvdqquvfbzakwezbd.supabase.co'; // REPLACE WITH YOUR ACTUAL SUPABASE URL
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9qZGh2ZHFxdXZmYnpha3dlemJkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgzNTk1NjgsImV4cCI6MjA3MzkzNTU2OH0.lK0cbz1beuQDOdQqMtncCATiL1riz1exMNzLSbJMg0M'; // REPLACE WITH YOUR ACTUAL ANON KEY
const apiKey = 'D3ff562b18507ab3ea6dc77177760a3f'; // Your OpenWeatherMap Key

let supabase; 
let userLocation = { lat: null, lon: null, name: '' };
let currentLang = 'en';
let currentUser = '';       // Stores the full name for display
let currentUserId = '';     // Stores the Phone Number as the unique identifier

const soilNpkDefaults = {
    "Alluvial": { N: 75, P: 20, K: 150 },
    "Black": { N: 40, P: 30, K: 200 },
    "Red": { N: 60, P: 40, K: 50 },
    "": { N: '', P: '', K: ''}
};

const translations = {
    en: {
        appName: "Krishi Mitra", selectLanguage: "Select Your Language", welcomeToApp: "Welcome to Krishi Mitra", getStarted: "Enter your details to get started", fullNamePlaceholder: "Full Name", phonePlaceholder: "Phone Number (e.g., 9876543210)", allowLocation: "ЁЯУН Allow Location Access", loginBtn: "Login", signUpBtn: "Sign Up", signInPrompt: "Sign In with your Phone Number", signUpPrompt: "Create a New Account", newAccountPrompt: "New user? ", haveAccountPrompt: "Already have an account? ", locationNeeded: "Location is needed for weather prediction.",
        welcomeUser: "Welcome, {name}! ЁЯСЛ", myFarms: "My Farms", addFarmBtn: "+ Add New Farm", deleteBtn: "Delete", confirmDelete: "Are you sure you want to delete this farm?", logoutBtn: "Logout",
        addFarmTitle: "Add New Farm", farmDetails: "Farm Details", farmNameLabel: "Farm Name", farmNamePlaceholder: "My Rabi Crop Farm", sowingDateLabel: "Date of Sowing",
        cropDetails: "Crop Details", soilTypeLabel: "Soil Type", landAreaLabel: "Land Area (in acres)", predictBtn: "Predict Yield",
        statusReport: "ЁЯУИ Current Status Report", predictedYield: "Predicted Yield", issues: "тЪая╕П Identified Issues", issueNitrogen: "Nitrogen level is low - may reduce productivity by 15%", issueHumidity: "High humidity detected - moderate fungal risk",
        recommendations: "ЁЯТб Optimization Recommendations", recUreaTitle: "Add 10kg Urea", recUreaDesc: "Apply nitrogen-rich fertilizer to boost crop growth.", recUreaYield: "тЬЕ Yield may increase by +12%",
        recIrrigateTitle: "Irrigate every 3 days", recIrrigateDesc: "Regular watering schedule to reduce plant stress.", recIrrigateYield: "тЬЕ Reduce stress, +10% yield",
        recNeemTitle: "Spray neem oil", recNeemDesc: "Organic pesticide to prevent fungal infections.", recNeemYield: "тЬЕ Prevent fungal loss, +8% saved",
        backToDashboard: "Back to Dashboard", noFarms: "No farms added yet. Click 'Add New Farm' to get started!", reportFor: "Report for:",
        soilOptions: { "": "Select soil type", "Alluvial": "Alluvial Soil", "Black": "Black Soil", "Red": "Red Soil" },
        cropOptions: { "": "Select crop", "Wheat": "Wheat", "Rice": "Rice", "Sugarcane": "Sugarcane" }
    },
    hi: {
        appName: "рдХреГрд╖рд┐ рдорд┐рддреНрд░", selectLanguage: "рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ", welcomeToApp: "рдХреГрд╖рд┐ рдорд┐рддреНрд░ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ", getStarted: "рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдирд╛ рд╡рд┐рд╡рд░рдг рджрд░реНрдЬ рдХрд░реЗрдВ", fullNamePlaceholder: "рдкреВрд░рд╛ рдирд╛рдо", phonePlaceholder: "рдлрд╝реЛрди рдирдВрдмрд░ (рдЙрджрд╛рд╣рд░рдг: 9876543210)", allowLocation: "ЁЯУН рд╕реНрдерд╛рди рдХреА рдЕрдиреБрдорддрд┐ рджреЗрдВ", loginBtn: "рд▓реЙрдЧ рдЗрди рдХрд░реЗрдВ", signUpBtn: "рд╕рд╛рдЗрди рдЕрдк рдХрд░реЗрдВ", signInPrompt: "рдЕрдкрдиреЗ рдлрд╝реЛрди рдирдВрдмрд░ рд╕реЗ рд▓реЙрдЧ рдЗрди рдХрд░реЗрдВ", signUpPrompt: "рдПрдХ рдирдпрд╛ рдЦрд╛рддрд╛ рдмрдирд╛рдПрдВ", newAccountPrompt: "рдирдП рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛? ", haveAccountPrompt: "рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдПрдХ рдЦрд╛рддрд╛ рд╣реИ? ", locationNeeded: "рдореМрд╕рдо рдХреА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдХреЗ рд▓рд┐рдП рд╕реНрдерд╛рди рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИред",
        welcomeUser: "рдирдорд╕реНрддреЗ, {name}! ЁЯСЛ", myFarms: "рдореЗрд░реЗ рдЦреЗрдд", addFarmBtn: "+ рдирдпрд╛ рдЦреЗрдд рдЬреЛрдбрд╝реЗрдВ", deleteBtn: "рд╣рдЯрд╛рдПрдВ", confirmDelete: "рдХреНрдпрд╛ рдЖрдк рд╡рд╛рдХрдИ рдЗрд╕ рдЦреЗрдд рдХреЛ рд╣рдЯрд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?", logoutBtn: "рд▓реЙрдЧ рдЖрдЙрдЯ",
        addFarmTitle: "рдирдпрд╛ рдЦреЗрдд рдЬреЛрдбрд╝реЗрдВ", farmDetails: "рдЦреЗрдд рдХрд╛ рд╡рд┐рд╡рд░рдг", farmNameLabel: "рдЦреЗрдд рдХрд╛ рдирд╛рдо", farmNamePlaceholder: "рдореЗрд░рд╛ рд░рдмреА рдлрд╕рд▓ рдХрд╛ рдЦреЗрдд", sowingDateLabel: "рдмреБрд╡рд╛рдИ рдХреА рддрд╛рд░реАрдЦ",
        cropDetails: "рдлрд╕рд▓ рдХрд╛ рд╡рд┐рд╡рд░рдг", soilTypeLabel: "рдорд┐рдЯреНрдЯреА рдХрд╛ рдкреНрд░рдХрд╛рд░", landAreaLabel: "рднреВрдорд┐ рдХреНрд╖реЗрддреНрд░ (рдПрдХрдбрд╝ рдореЗрдВ)", predictBtn: "рдЙрдкрдЬ рдХреА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдХрд░реЗрдВ",
        statusReport: "ЁЯУИ рд╡рд░реНрддрдорд╛рди рд╕реНрдерд┐рддрд┐ рд░рд┐рдкреЛрд░реНрдЯ", predictedYield: "рдЕрдиреБрдорд╛рдирд┐рдд рдЙрдкрдЬ", issues: "тЪая╕П рдкрд╣рдЪрд╛рдиреЗ рдЧрдП рдореБрджреНрджреЗ", issueNitrogen: "рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдХрд╛ рд╕реНрддрд░ рдХрдо рд╣реИ - рдЙрддреНрдкрд╛рджрдХрддрд╛ 15% рддрдХ рдХрдо рд╣реЛ рд╕рдХрддреА рд╣реИ", issueHumidity: "рдЙрдЪреНрдЪ рдЖрд░реНрджреНрд░рддрд╛ рдХрд╛ рдкрддрд╛ рдЪрд▓рд╛ - рдлрдВрдЧрд▓ рдХрд╛ рдордзреНрдпрдо рдЬреЛрдЦрд┐рдо",
        recommendations: "ЁЯТб рдЕрдиреБрдХреВрд▓рди рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ", recUreaTitle: "10 рдХрд┐рд▓реЛ рдпреВрд░рд┐рдпрд╛ рдбрд╛рд▓реЗрдВ", recUreaDesc: "рдлрд╕рд▓ рдХреА рд╡реГрджреНрдзрд┐ рдХреЛ рдмрдврд╝рд╛рд╡рд╛ рджреЗрдиреЗ рдХреЗ рд▓рд┐рдП рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдпреБрдХреНрдд рдЙрд░реНрд╡рд░рдХ рдбрд╛рд▓реЗрдВред", recUreaYield: "тЬЕ рдЙрдкрдЬ 12% рддрдХ рдмрдврд╝ рд╕рдХрддреА рд╣реИ",
        recIrrigateTitle: "рд╣рд░ 3 рджрд┐рди рдореЗрдВ рд╕рд┐рдВрдЪрд╛рдИ рдХрд░реЗрдВ", recIrrigateDesc: "рдкреМрдзреЛрдВ рдХрд╛ рддрдирд╛рд╡ рдХрдо рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдирд┐рдпрдорд┐рдд рд░реВрдк рд╕реЗ рдкрд╛рдиреА рджреЗрдВред", recIrrigateYield: "тЬЕ рддрдирд╛рд╡ рдХрдо рдХрд░реЗрдВ, +10% рдЙрдкрдЬ",
        recNeemTitle: "рдиреАрдо рддреЗрд▓ рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ", recNeemDesc: "рдлрдВрдЧрд▓ рд╕рдВрдХреНрд░рдордг рдХреЛ рд░реЛрдХрдиреЗ рдХреЗ рд▓рд┐рдП рдЬреИрд╡рд┐рдХ рдХреАрдЯрдирд╛рд╢рдХред", recNeemYield: "тЬЕ рдлрдВрдЧрд▓ рдиреБрдХрд╕рд╛рди рд░реЛрдХреЗрдВ, +8% рдмрдЪрдд",
        backToDashboard: "рдбреИрд╢рдмреЛрд░реНрдб рдкрд░ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдВ", noFarms: "рдЕрднреА рддрдХ рдХреЛрдИ рдЦреЗрдд рдирд╣реАрдВ рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛ рд╣реИред рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП 'рдирдпрд╛ рдЦреЗрдд рдЬреЛрдбрд╝реЗрдВ' рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ!", reportFor: "рд░рд┐рдкреЛрд░реНрдЯ:",
        soilOptions: { "": "рдорд┐рдЯреНрдЯреА рдХрд╛ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ", "Alluvial": "рдЬрд▓реЛрдврд╝ рдорд┐рдЯреНрдЯреА", "Black": "рдХрд╛рд▓реА рдорд┐рдЯреНрдЯреА", "Red": "рд▓рд╛рд▓ рдорд┐рдЯреНрдЯреА" },
        cropOptions: { "": "рдлрд╕рд▓ рдЪреБрдиреЗрдВ", "Wheat": "рдЧреЗрд╣реВрдБ", "Rice": "рдЪрд╛рд╡рд▓", "Sugarcane": "рдЧрдиреНрдирд╛" }
    },
    mr: { appName: "рдХреГрд╖реА рдорд┐рддреНрд░", selectLanguage: "рддреБрдордЪреА рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛", welcomeToApp: "рдХреГрд╖реА рдорд┐рддреНрд░ рдордзреНрдпреЗ рдЖрдкрд▓реЗ рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ", getStarted: "рд╕реБрд░реБ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рдЖрдкрд▓реЗ рддрдкрд╢реАрд▓ рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛", fullNamePlaceholder: "рдкреВрд░реНрдг рдирд╛рд╡", phonePlaceholder: "рдлреЛрди рдирдВрдмрд░ (рдЙрджрд╛: репреоренремрелрекрейреирезреж)", allowLocation: "ЁЯУН рд╕реНрдерд╛рди рдкрд░рд╡рд╛рдирдЧреА рджреНрдпрд╛", loginBtn: "рд▓реЙрдЧ рдЗрди рдХрд░рд╛", signUpBtn: "рд╕рд╛рдЗрди рдЕрдк рдХрд░рд╛", signInPrompt: "рддреБрдордЪреНрдпрд╛ рдлреЛрди рдирдВрдмрд░рдиреЗ рд▓реЙрдЧ рдЗрди рдХрд░рд╛", signUpPrompt: "рдПрдХ рдирд╡реАрди рдЦрд╛рддреЗ рддрдпрд╛рд░ рдХрд░рд╛", newAccountPrompt: "рдирд╡реАрди рд╡рд╛рдкрд░рдХрд░реНрддрд╛? ", haveAccountPrompt: "рдЖрдзреАрдЪ рдЦрд╛рддреЗ рдЖрд╣реЗ? ", locationNeeded: "рд╣рд╡рд╛рдорд╛рди рдЕрдВрджрд╛рдЬрд╛рд╕рд╛рдареА рд╕реНрдерд╛рдирд╛рдЪреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рдЖрд╣реЗ.", welcomeUser: "рдирдорд╕реНрдХрд╛рд░, {name}! ЁЯСЛ", myFarms: "рдорд╛рдЭреА рд╢реЗрддреА", addFarmBtn: "+ рдирд╡реАрди рд╢реЗрдд рдЬреЛрдбрд╛", deleteBtn: "рдХрд╛рдврд╛", confirmDelete: "рддреБрдореНрд╣рд╛рд▓рд╛ рдЦрд╛рддреНрд░реА рдЖрд╣реЗ рдХреА рд╣реЗ рд╢реЗрдд рдХрд╛рдврд╛рдпрдЪреЗ рдЖрд╣реЗ?", logoutBtn: "рд▓реЙрдЧ рдЖрдЙрдЯ", addFarmTitle: "рдирд╡реАрди рд╢реЗрдд рдЬреЛрдбрд╛", farmDetails: "рд╢реЗрддреАрдЪреЗ рддрдкрд╢реАрд▓", farmNameLabel: "рд╢реЗрддрд╛рдЪреЗ рдирд╛рд╡", farmNamePlaceholder: "рдорд╛рдЭреЗ рд░рдмреНрдмреА рдкреАрдХ рд╢реЗрдд", sowingDateLabel: "рдкреЗрд░рдгреАрдЪреА рддрд╛рд░реАрдЦ", cropDetails: "рдкрд┐рдХрд╛рдЪреЗ рддрдкрд╢реАрд▓", soilTypeLabel: "рдорд╛рддреАрдЪрд╛ рдкреНрд░рдХрд╛рд░", landAreaLabel: "рдЬрдореАрди рдХреНрд╖реЗрддреНрд░ (рдПрдХрд░ рдордзреНрдпреЗ)", predictBtn: "рдЙрддреНрдкрд╛рджрдирд╛рдЪрд╛ рдЕрдВрджрд╛рдЬ рд▓рд╛рд╡рд╛", statusReport: "ЁЯУИ рд╕рджреНрдпрд╕реНрдерд┐рддреА рдЕрд╣рд╡рд╛рд▓", predictedYield: "рдЕрдкреЗрдХреНрд╖рд┐рдд рдЙрддреНрдкрд╛рджрди", issues: "тЪая╕П рдУрд│рдЦрд▓реЗрд▓реНрдпрд╛ рд╕рдорд╕реНрдпрд╛", issueNitrogen: "рдирд╛рдпрдЯреНрд░реЛрдЬрдирдЪреА рдкрд╛рддрд│реА рдХрдореА рдЖрд╣реЗ - рдЙрддреНрдкрд╛рджрдХрддрд╛ резрел% рдиреЗ рдХрдореА рд╣реЛрдК рд╢рдХрддреЗ", issueHumidity: "рдЙрдЪреНрдЪ рдЖрд░реНрджреНрд░рддрд╛ рдЖрдврд│рд▓реА - рдмреБрд░рд╢реАрдЬрдиреНрдп рд░реЛрдЧрд╛рдЪрд╛ рдордзреНрдпрдо рдзреЛрдХрд╛", recommendations: "ЁЯТб рдСрдкреНрдЯрд┐рдорд╛рдпрдЭреЗрд╢рди рд╢рд┐рдлрд╛рд░рд╕реА", recUreaTitle: "резреж рдХрд┐рд▓реЛ рдпреБрд░рд┐рдпрд╛ рдЯрд╛рдХрд╛", recUreaDesc: "рдкрд┐рдХрд╛рдЪреНрдпрд╛ рд╡рд╛рдвреАрд╕рд╛рдареА рдирд╛рдпрдЯреНрд░реЛрдЬрдирдпреБрдХреНрдд рдЦрдд рд╡рд╛рдкрд░рд╛.", recUreaYield: "тЬЕ рдЙрддреНрдкрд╛рджрди резреи% рдиреЗ рд╡рд╛рдвреВ рд╢рдХрддреЗ", recIrrigateTitle: "рджрд░ рей рджрд┐рд╡рд╕рд╛рдВрдиреА рд╕рд┐рдВрдЪрди рдХрд░рд╛", recIrrigateDesc: "рд╡рдирд╕реНрдкрддреАрдВрд╡рд░реАрд▓ рддрд╛рдг рдХрдореА рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рдирд┐рдпрдорд┐рдд рдкрд╛рдгреА рджреНрдпрд╛.", recIrrigateYield: "тЬЕ рддрд╛рдг рдХрдореА рдХрд░рд╛, +резреж% рдЙрддреНрдкрд╛рджрди", recNeemTitle: "рдХрдбреБрд▓рд┐рдВрдмрд╛рдЪреНрдпрд╛ рддреЗрд▓рд╛рдЪреА рдлрд╡рд╛рд░рдгреА рдХрд░рд╛", recNeemDesc: "рдмреБрд░рд╢реАрдЬрдиреНрдп рд╕рдВрд╕рд░реНрдЧ рдЯрд╛рд│рдгреНрдпрд╛рд╕рд╛рдареА рд╕реЗрдВрджреНрд░рд┐рдп рдХреАрдЯрдХрдирд╛рд╢рдХ.", recNeemYield: "тЬЕ рдмреБрд░рд╢реАрдЪреЗ рдиреБрдХрд╕рд╛рди рдЯрд╛рд│рд╛, +рео% рдмрдЪрдд", backToDashboard: "рдбреЕрд╢рдмреЛрд░реНрдбрд╡рд░ рдкрд░рдд рдЬрд╛", noFarms: "рдЕрджреНрдпрд╛рдк рдХреЛрдгрддреАрд╣реА рд╢реЗрддреА рдЬреЛрдбрд▓реЗрд▓реА рдирд╛рд╣реА.", reportFor: "рдпрд╛рд╕рд╛рдареА рдЕрд╣рд╡рд╛рд▓:", soilOptions: { "": "рдорд╛рддреАрдЪрд╛ рдкреНрд░рдХрд╛рд░ рдирд┐рд╡рдбрд╛", "Alluvial": "рдЧрд╛рд│рд╛рдЪреА рдорд╛рддреА", "Black": "рдХрд╛рд│реА рдорд╛рддреА", "Red": "рд▓рд╛рд▓ рдорд╛рддреА" }, cropOptions: { "": "рдкреАрдХ рдирд┐рд╡рдбрд╛", "Wheat": "рдЧрд╣реВ", "Rice": "рддрд╛рдВрджреВрд│", "Sugarcane": "рдКрд╕" } },
    ta: { appName: "роХро┐ро░рпБро╖ро┐ рооро┐родрпНро░ро╛", selectLanguage: "роЙроЩрпНроХро│рпН роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН", welcomeToApp: "роХро┐ро░рпБро╖ро┐ рооро┐родрпНро░ро╛ро╡ро┐ро▒рпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН", getStarted: "родрпКроЯроЩрпНроХрпБро╡родро▒рпНроХрпБ роЙроЩрпНроХро│рпН ро╡ро┐ро╡ро░роЩрпНроХро│рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН", fullNamePlaceholder: "роорпБро┤рпБ рокрпЖропро░рпН", phonePlaceholder: "родрпКро▓рпИрокрпЗроЪро┐ роОрогрпН (роО.роХро╛. 9876543210)", allowLocation: "ЁЯУН роЗро░рпБрокрпНрокро┐роЯродрпНродрпИ роЕройрпБроородро┐роХрпНроХро╡рпБроорпН", loginBtn: "роЙро│рпНроирпБро┤рпИропро╡рпБроорпН", signUpBtn: "рокродро┐ро╡рпБ роЪрпЖропрпНропро╡рпБроорпН", signInPrompt: "роЙроЩрпНроХро│рпН родрпКро▓рпИрокрпЗроЪро┐ роОрогрпНрогрпБроЯройрпН роЙро│рпНроирпБро┤рпИропро╡рпБроорпН", signUpPrompt: "роТро░рпБ рокрпБродро┐роп роХрогроХрпНроХрпИ роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН", newAccountPrompt: "рокрпБродро┐роп рокропройро░рпН? ", haveAccountPrompt: "роПро▒рпНроХройро╡рпЗ роТро░рпБ роХрогроХрпНроХрпБ роЙро│рпНро│родро╛? ", locationNeeded: "роХро╛ро▓роиро┐ро▓рпИ роХрогро┐рокрпНрокрпБроХрпНроХрпБ роЗро░рпБрокрпНрокро┐роЯроорпН родрпЗро╡рпИ.", welcomeUser: "ро╡рогроХрпНроХроорпН, {name}! ЁЯСЛ", myFarms: "роОройрпН рокрогрпНрогрпИроХро│рпН", addFarmBtn: "+ рокрпБродро┐роп рокрогрпНрогрпИропрпИроЪрпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН", deleteBtn: "роирпАроХрпНроХрпБ", confirmDelete: "роЗроирпНрод рокрогрпНрогрпИропрпИ роирпАроХрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│ро╛?", logoutBtn: "ро╡рпЖро│ро┐ропрпЗро▒рпБ", addFarmTitle: "рокрпБродро┐роп рокрогрпНрогрпИропрпИроЪрпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН", farmDetails: "рокрогрпНрогрпИ ро╡ро┐ро╡ро░роЩрпНроХро│рпН", farmNameLabel: "рокрогрпНрогрпИропро┐ройрпН рокрпЖропро░рпН", farmNamePlaceholder: "роОройродрпБ ро░рокро┐ рокропро┐ро░рпН рокрогрпНрогрпИ", sowingDateLabel: "ро╡ро┐родрпИроХрпНроХрпБроорпН родрпЗродро┐", cropDetails: "рокропро┐ро░рпН ро╡ро┐ро╡ро░роЩрпНроХро│рпН", soilTypeLabel: "роорогрпН ро╡роХрпИ", landAreaLabel: "роиро┐ро▓рокрпН рокроХрпБродро┐ (роПроХрпНроХро░ро┐ро▓рпН)", predictBtn: "ро╡ро┐ро│рпИроЪрпНроЪро▓рпИроХрпН роХрогро┐роХрпНроХро╡рпБроорпН", statusReport: "ЁЯУИ родро▒рпНрокрпЛродрпИроп роиро┐ро▓рпИ роЕро▒ро┐роХрпНроХрпИ", predictedYield: "роХрогро┐роХрпНроХрокрпНрокроЯрпНроЯ ро╡ро┐ро│рпИроЪрпНроЪро▓рпН", issues: "тЪая╕П роЕроЯрпИропро╛ро│роорпН роХро╛рогрокрпНрокроЯрпНроЯ роЪро┐роХрпНроХро▓рпНроХро│рпН", issueNitrogen: "роирпИроЯрпНро░роЬройрпН роЕро│ро╡рпБ роХрпБро▒рпИро╡ро╛роХ роЙро│рпНро│родрпБ - роЙро▒рпНрокродрпНродро┐родрпНродро┐ро▒ройрпИ 15% роХрпБро▒рпИроХрпНроХро▓ро╛роорпН", issueHumidity: "роЕродро┐роХ роИро░рокрпНрокродроорпН роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯродрпБ - рооро┐родрооро╛рой рокрпВроЮрпНроЪрпИ роЖрокродрпНродрпБ", recommendations: "ЁЯТб роорпЗроорпНрокроЯрпБродрпНродро▓рпН рокро░ро┐роирпНродрпБро░рпИроХро│рпН", recUreaTitle: "10 роХро┐ро▓рпЛ ропрпВро░ро┐ропро╛ роЪрпЗро░рпНроХрпНроХро╡рпБроорпН", recUreaDesc: "рокропро┐ро░рпН ро╡ро│ро░рпНроЪрпНроЪро┐ропрпИ роЕродро┐роХро░ро┐роХрпНроХ роирпИроЯрпНро░роЬройрпН роиро┐ро▒рпИроирпНрод роЙро░родрпНродрпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБроЩрпНроХро│рпН.", recUreaYield: "тЬЕ ро╡ро┐ро│рпИроЪрпНроЪро▓рпН 12% ро╡ро░рпИ роЕродро┐роХро░ро┐роХрпНроХро▓ро╛роорпН", recIrrigateTitle: "роТро╡рпНро╡рпКро░рпБ 3 роиро╛роЯрпНроХро│рпБроХрпНроХрпБроорпН роирпАро░рпНрокрпНрокро╛роЪройроорпН роЪрпЖропрпНропро╡рпБроорпН", recIrrigateDesc: "родро╛ро╡ро░ роЕро┤рпБродрпНродродрпНродрпИроХрпН роХрпБро▒рпИроХрпНроХ ро╡ро┤роХрпНроХрооро╛рой роирпАро░рпНрокрпНрокро╛роЪрой роЕроЯрпНроЯро╡рогрпИ.", recIrrigateYield: "тЬЕ роорой роЕро┤рпБродрпНродродрпНродрпИроХрпН роХрпБро▒рпИродрпНродро▓рпН, +10% ро╡ро┐ро│рпИроЪрпНроЪро▓рпН", recNeemTitle: "ро╡рпЗрокрпНрок роОрогрпНрогрпЖропрпИродрпН родрпЖро│ро┐роХрпНроХро╡рпБроорпН", recNeemDesc: "рокрпВроЮрпНроЪрпИродрпН родрпКро▒рпНро▒рпБроХро│рпИродрпН родроЯрпБроХрпНроХ роХро░ро┐роорокрпН рокрпВроЪрпНроЪро┐роХрпНроХрпКро▓рпНро▓ро┐.", recNeemYield: "тЬЕ рокрпВроЮрпНроЪрпИ роЗро┤рокрпНрокрпИродрпН родроЯрпБроХрпНроХро╡рпБроорпН, +8% роЪрпЗрооро┐рокрпНрокрпБ", backToDashboard: "роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБроХрпНроХрпБродрпН родро┐ро░рпБроорпНрокрпБ", noFarms: "роЗройрпНройрпБроорпН рокрогрпНрогрпИроХро│рпН роЪрпЗро░рпНроХрпНроХрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ.", reportFor: "роЕро▒ро┐роХрпНроХрпИ:", soilOptions: { "": "роорогрпН ро╡роХрпИропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН", "Alluvial": "ро╡рогрпНроЯро▓рпН роорогрпН", "Black": "роХро░ро┐роЪро▓рпН роорогрпН", "Red": "роЪрпЖроорпНроорогрпН" }, cropOptions: { "": "рокропро┐ро░рпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН", "Wheat": "роХрпЛродрпБроорпИ", "Rice": "роЕро░ро┐роЪро┐", "Sugarcane": "роХро░рпБроорпНрокрпБ" } },
    te: { appName: "р░Хр▒Гр░╖р░┐ р░ор░┐р░др▒Нр░░", selectLanguage: "р░ор▒А р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐", welcomeToApp: "р░Хр▒Гр░╖р░┐ р░ор░┐р░др▒Нр░░р░Хр▒Б р░╕р▒Нр░╡р░╛р░Чр░др░В", getStarted: "р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░ор▒А р░╡р░┐р░╡р░░р░╛р░▓р░ир▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐", fullNamePlaceholder: "р░кр▒Вр░░р▒Нр░др░┐ р░кр▒Зр░░р▒Б", phonePlaceholder: "р░лр▒Лр░ир▒Н р░ир░Вр░мр░░р▒Н (р░Йр░жр░╛: 9876543210)", allowLocation: "ЁЯУН р░╕р▒Нр░ер░╛р░ир░╛р░ир▒Нр░ир░┐ р░Ер░ир▒Бр░ор░др░┐р░Вр░Ър░Вр░бр░┐", loginBtn: "р░▓р░╛р░Чр░┐р░ир▒Н р░Ер░╡р▒Нр░╡р░Вр░бр░┐", signUpBtn: "р░╕р▒Ир░ир▒Н р░Ер░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐", signInPrompt: "р░ор▒А р░лр▒Лр░ир▒Н р░ир░Вр░мр░░р▒НтАМр░др▒Л р░▓р░╛р░Чр░┐р░ир▒Н р░Ер░╡р▒Нр░╡р░Вр░бр░┐", signUpPrompt: "р░Хр▒Кр░др▒Нр░д р░Цр░╛р░др░╛р░ир▒Б р░╕р▒Гр░╖р▒Нр░Яр░┐р░Вр░Ър░Вр░бр░┐", newAccountPrompt: "р░Хр▒Кр░др▒Нр░д р░╡р░╛р░бр▒Бр░Хр░░р░┐? ", haveAccountPrompt: "р░Зр░кр▒Нр░кр░Яр░┐р░Хр▒З р░Цр░╛р░др░╛ р░Йр░Вр░жр░╛? ", locationNeeded: "р░жр░┐р░Чр▒Бр░мр░бр░┐ р░Ер░Вр░Ър░ир░╛ р░Хр▒Лр░╕р░В р░╕р▒Нр░ер░╛р░ир░В р░Ер░╡р░╕р░░р░В.", welcomeUser: "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В, {name}! ЁЯСЛ", myFarms: "р░ир░╛ р░кр▒Кр░▓р░╛р░▓р▒Б", addFarmBtn: "+ р░Хр▒Кр░др▒Нр░д р░кр▒Кр░▓р░╛р░ир▒Нр░ир░┐ р░Ьр▒Лр░бр░┐р░Вр░Ър░Вр░бр░┐", deleteBtn: "р░др▒Кр░▓р░Чр░┐р░Вр░Ър▒Б", confirmDelete: "р░ор▒Ар░░р▒Б р░И р░кр▒Кр░▓р░╛р░ир▒Нр░ир░┐ р░др▒Кр░▓р░Чр░┐р░Вр░Ър░╛р░▓р░ир▒Бр░Хр▒Бр░Вр░Яр▒Бр░ир▒Нр░ир░╛р░░р░╛?", logoutBtn: "р░▓р░╛р░Чр▒Н р░Ер░╡р▒Бр░Яр▒Н", addFarmTitle: "р░Хр▒Кр░др▒Нр░д р░кр▒Кр░▓р░╛р░ир▒Нр░ир░┐ р░Ьр▒Лр░бр░┐р░Вр░Ър░Вр░бр░┐", farmDetails: "р░кр▒Кр░▓р░В р░╡р░┐р░╡р░░р░╛р░▓р▒Б", farmNameLabel: "р░кр▒Кр░▓р░В р░кр▒Зр░░р▒Б", farmNamePlaceholder: "р░ир░╛ р░░р░мр▒А р░кр░Вр░Я р░кр▒Кр░▓р░В", sowingDateLabel: "р░╡р░┐р░др▒Нр░др▒З р░др▒Зр░жр▒А", cropDetails: "р░кр░Вр░Я р░╡р░┐р░╡р░░р░╛р░▓р▒Б", soilTypeLabel: "р░ир▒Зр░▓ р░░р░Хр░В", landAreaLabel: "р░нр▒Вр░ор░┐ р░╡р░┐р░╕р▒Нр░др▒Ар░░р▒Нр░гр░В (р░Ор░Хр░░р░╛р░▓р░▓р▒Л)", predictBtn: "р░жр░┐р░Чр▒Бр░мр░бр░┐р░ир░┐ р░Ер░Вр░Ър░ир░╛ р░╡р▒Зр░пр░Вр░бр░┐", statusReport: "ЁЯУИ р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░╕р▒Нр░ер░┐р░др░┐ р░ир░┐р░╡р▒Зр░жр░┐р░Х", predictedYield: "р░Ер░Вр░Ър░ир░╛ р░╡р▒Зр░╕р░┐р░и р░жр░┐р░Чр▒Бр░мр░бр░┐", issues: "тЪая╕П р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░┐р░и р░╕р░ор░╕р▒Нр░пр░▓р▒Б", issueNitrogen: "р░ир░др▒Нр░░р░Ьр░ир░┐ р░╕р▒Нр░ер░╛р░пр░┐ р░др░Хр▒Нр░Хр▒Бр░╡р░Чр░╛ р░Йр░Вр░жр░┐ - р░Йр░др▒Нр░кр░╛р░жр░Хр░д 15% р░др░Чр▒Нр░Чр▒Бр░др▒Бр░Вр░жр░┐", issueHumidity: "р░Ер░зр░┐р░Х р░др▒Зр░о р░Хр░ир▒Бр░Чр▒Кр░ир░мр░бр░┐р░Вр░жр░┐ - р░ор░зр▒Нр░пр░╕р▒Нр░е р░╢р░┐р░▓р▒Ар░Вр░зр▒Нр░░ р░кр▒Нр░░р░ор░╛р░жр░В", recommendations: "ЁЯТб р░Жр░кр▒Нр░Яр░┐р░ор▒Ир░Ьр▒Зр░╖р░ир▒Н р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р▒Б", recUreaTitle: "10 р░Хр░┐р░▓р▒Лр░▓ р░пр▒Вр░░р░┐р░пр░╛ р░Ьр▒Лр░бр░┐р░Вр░Ър░Вр░бр░┐", recUreaDesc: "р░кр░Вр░Яр░▓ р┤╡р┤│р╡╝р┤Ър╡Нр┤Ър░ир▒Б р░кр▒Жр░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░ир░др▒Нр░░р░Ьр░ир░┐ р░Ер░зр░┐р░Хр░Вр░Чр░╛ р░Йр░Вр░бр▒З р░Ор░░р▒Бр░╡р▒Бр░ир▒Б р░╡р▒Зр░пр░Вр░бр░┐.", recUreaYield: "тЬЕ р░жр░┐р░Чр▒Бр░мр░бр░┐ 12% р░╡р░░р░Хр▒Б р░кр▒Жр░░р░Чр░╡р░Ър▒Нр░Ър▒Б",
        recIrrigateTitle: "р░кр▒Нр░░р░др░┐ 3 р░░р▒Лр░Ьр▒Бр░▓р░Хр▒Б р░ир▒Ар░░р▒Б р░кр▒Жр░Яр▒Нр░Яр░Вр░бр░┐", recIrrigateDesc: "р░ор▒Кр░Хр▒Нр░Хр░▓ р░Тр░др▒Нр░др░┐р░бр░┐р░ир░┐ р░др░Чр▒Нр░Чр░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░Хр▒Нр░░р░ор░ор▒Ир░и р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓ р░╖р▒Жр░бр▒Нр░пр▒Вр░▓р▒Н.", recIrrigateYield: "тЬЕ р░Тр░др▒Нр░др░┐р░бр░┐р░ир░┐ р░др░Чр▒Нр░Чр░┐р░Вр░Ър░Вр░бр░┐, +10% р░жр░┐р░Чр▒Бр░мр░бр░┐", recNeemTitle: "р░╡р▒Зр░к р░ир▒Вр░ир▒Жр░ир▒Б р░кр░┐р░Ър░┐р░Хр░╛р░░р▒А р░Ър▒Зр░пр░Вр░бр░┐", recNeemDesc: "р░╢р░┐р░▓р▒Ар░Вр░зр▒Нр░░ р░╕р░Вр░Хр▒Нр░░р░ор░гр░▓р░ир▒Б р░ир░┐р░╡р░╛р░░р░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░╕р▒Зр░Вр░жр▒Нр░░р▒Ар░п р░кр▒Бр░░р▒Бр░Чр▒Бр░ор░Вр░жр▒Б.", recNeemYield: "тЬЕ р░╢р░┐р░▓р▒Ар░Вр░зр▒Нр░░ р░ир░╖р▒Нр░Яр░╛р░ир▒Нр░ир░┐ р░ир░┐р░╡р░╛р░░р░┐р░Вр░Ър░Вр░бр░┐, +8% р░Жр░жр░╛", backToDashboard: "р░бр░╛р░╖р▒НтАМр░мр▒Лр░░р▒Нр░бр▒НтАМр░Хр▒Б р░др░┐р░░р░┐р░Чр░┐ р░╡р▒Жр░│р▒Нр░▓р░Вр░бр░┐", noFarms: "р░Зр░Вр░Хр░╛ р░кр▒Кр░▓р░╛р░▓р▒Б р░Ьр▒Лр░бр░┐р░Вр░Ър░мр░бр░▓р▒Зр░жр▒Б.", reportFor: "р░Хр▒Лр░╕р░В р░ир░┐р░╡р▒Зр░жр░┐р░Х:", soilOptions: { "": "р░ир▒Зр░▓ р░░р░Хр░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐", "Alluvial": "р░Тр░Вр░бр▒Нр░░р▒Б р░ир▒Зр░▓", "Black": "р░ир░▓р▒Нр░▓ р░ир▒Зр░▓", "Red": "р░Ор░░р▒Нр░░ р░ир▒Зр░▓" }, cropOptions: { "": "р░кр░Вр░Яр░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐", "Wheat": "р░Чр▒Лр░зр▒Бр░о", "Rice": "р░мр░┐р░пр▒Нр░пр░В", "Sugarcane": "р░Ър▒Жр░░р░Хр▒Б" } }
};

// --- CORE FUNCTIONS ---

function setLanguage(lang) {
    currentLang = lang;
    localStorage.setItem('language', lang);
    document.querySelectorAll('[data-translate-key]').forEach(el => {
        const key = el.getAttribute('data-translate-key');
        const translation = translations[lang]?.[key] || translations['en'][key];
        if (el.placeholder !== undefined) { el.placeholder = translation; } 
        else { el.innerText = translation; }
    });
    const langOptions = translations[lang] || translations['en'];
    
    if (document.getElementById('soil-type')) {
        updateDropdown('soil-type', langOptions.soilOptions);
    }
    if (document.getElementById('crop-type')) {
        updateDropdown('crop-type', langOptions.cropOptions);
    }
}

function updateDropdown(selectId, options) {
    const selectElement = document.getElementById(selectId);
    if (!selectElement) return; 

    selectElement.innerHTML = '';
    for (const value in options) {
        const optionElement = document.createElement('option');
        optionElement.value = value;
        optionElement.innerText = options[value];
        selectElement.appendChild(optionElement);
    }
}

function setLanguageAndScreen(lang, screenId) { 
    setLanguage(lang); 
    showScreen(screenId); 
}

function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => screen.classList.remove('active'));
    document.getElementById(screenId).classList.add('active');
}

function toggleForm(formId) {
    document.getElementById('login-form').classList.remove('active');
    document.getElementById('signup-form').classList.remove('active');
    document.getElementById(formId).classList.add('active');
}

function autofillNpk() {
    const soilType = document.getElementById('soil-type').value;
    const npk = soilNpkDefaults[soilType];
    document.getElementById('npk-n').value = npk.N;
    document.getElementById('npk-p').value = npk.P;
    document.getElementById('npk-k').value = npk.K;
}

// --- LOCATION FUNCTIONS ---

function getLocation() {
    const locationBoxLogin = document.getElementById('location-box');
    const locationBoxSignup = document.getElementById('signup-location-box');
    
    if (navigator.geolocation) {
        locationBoxLogin.innerHTML = 'Detecting Location...';
        locationBoxSignup.innerHTML = 'Detecting Location...';
        
        navigator.geolocation.getCurrentPosition(fetchLocationName, handleLocationError);
    } else { alert("Geolocation is not supported by this browser."); }
}

async function fetchLocationName(position) {
    userLocation.lat = position.coords.latitude; 
    userLocation.lon = position.coords.longitude;
    try {
        const geoApiUrl = `https://api.openweathermap.org/geo/1.0/reverse?lat=${userLocation.lat}&lon=${userLocation.lon}&limit=1&appid=${apiKey}`;
        const response = await fetch(geoApiUrl);
        if (!response.ok) throw new Error(`Network error`);
        const data = await response.json();
        
        if (data && data.length > 0) { 
            userLocation.name = `${data[0].name}, ${data[0].state || data[0].country}`; 
        } else { 
            throw new Error('Could not find a location name.'); 
        }
        
        // Update both login and signup screens
        const successMessage = `<span style="color: var(--primary-green);">Location detected!</span>`;
        document.getElementById('location-box').innerHTML = `ЁЯУН ${userLocation.name}`;
        document.getElementById('location-display').innerHTML = successMessage;
        
        document.getElementById('signup-location-box').innerHTML = `ЁЯУН ${userLocation.name}`;
        document.getElementById('signup-location-display').innerHTML = successMessage;


    } catch (error) {
        console.error("Error fetching location name:", error);
        const failMessage = 'ЁЯУН Location Access Failed';
        const errorMessage = `<span style="color: var(--danger-red);">Error: ${error.message.substring(0, 30)}...</span>`;
        
        document.getElementById('location-box').innerHTML = failMessage;
        document.getElementById('location-display').innerHTML = errorMessage;
        
        document.getElementById('signup-location-box').innerHTML = failMessage;
        document.getElementById('signup-location-display').innerHTML = errorMessage;
    }
}

function handleLocationError(error) { 
    alert(`Location Error: ${error.message}`); 
    document.getElementById('location-display').innerHTML = `<span style="color: var(--danger-red);">Permission Denied.</span>`;
    document.getElementById('signup-location-display').innerHTML = `<span style="color: var(--danger-red);">Permission Denied.</span>`;
}

// --- AUTHENTICATION HANDLERS (Manual Login/Signup with Phone) ---

async function handleLogin() {
    const phoneNumber = document.getElementById('login-phone').value;

    if (!phoneNumber) {
        alert('Please enter your phone number.'); return;
    }
    if (!userLocation.name) { 
        alert('Please allow location access and wait for detection.'); return;
    }
    
    // Query the 'profiles' table using the phone number
    const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('full_name, phone_number, latitude, longitude, location_name')
        .eq('phone_number', phoneNumber)
        .single();

    if (profileError) {
        if (profileError.code === 'PGRST116') { // Error code for 'no rows found'
            alert('Login failed: Account not found. Please sign up first.');
        } else {
            console.error('Login Query Error:', profileError.message);
            alert(`Login failed: ${profileError.message}`);
        }
        return;
    }

    // Set global user details
    currentUserId = profile.phone_number; 
    currentUser = profile.full_name;
    userLocation.lat = profile.latitude; 
    userLocation.lon = profile.longitude;
    userLocation.name = profile.location_name;

    const welcomeTemplate = translations[currentLang]?.welcomeUser || translations['en'].welcomeUser;
    document.getElementById('welcome-message').innerText = welcomeTemplate.replace('{name}', currentUser);
    document.getElementById('dashboard-location').innerText = `ЁЯУН ${userLocation.name}`;
    renderFarms();
    showScreen('dashboard-screen');
}

async function handleSignUp() {
    const fullName = document.getElementById('signup-full-name').value;
    const phoneNumber = document.getElementById('signup-phone').value;
    
    if (!fullName || !phoneNumber) {
         alert('Please fill in your full name and phone number.'); return;
    }
    if (!userLocation.name) { 
        alert('Please allow location access and wait for detection.'); return;
    }
    
    // Check if phone number already exists
    const { data: existingUser, error: checkError } = await supabase
        .from('profiles')
        .select('phone_number')
        .eq('phone_number', phoneNumber);

    if (checkError && checkError.code !== 'PGRST116') {
        console.error('Check Phone Error:', checkError.message);
        alert(`Sign Up failed: ${checkError.message}`);
        return;
    }
    if (existingUser && existingUser.length > 0) {
        alert('Account with this phone number already exists. Please login.');
        return;
    }

    // Save user profile data to the 'public.profiles' table
    const { error: profileError } = await supabase
        .from('profiles')
        .insert({ 
            phone_number: phoneNumber, 
            full_name: fullName, 
            location_name: userLocation.name,
            latitude: userLocation.lat,
            longitude: userLocation.lon
        });

    if (profileError) {
        console.error('Profile Save Error:', profileError.message);
        alert('Account creation failed. Please try again.');
        return;
    }
    
    alert("Account created successfully! Please log in.");
    toggleForm('login-form');
}

function logout() { 
    currentUser = ''; 
    currentUserId = ''; 
    // Simply reload to reset state and return to the language/login screen
    location.reload(); 
}

// --- FARM DATA HANDLERS ---

async function saveAndPredict() {
    const farmName = document.getElementById('farm-name').value;
    const sowingDate = document.getElementById('sowing-date').value;
    const cropType = document.getElementById('crop-type').value;
    const landArea = document.getElementById('land-area').value;
    const soilType = document.getElementById('soil-type').value;
    const npkN = document.getElementById('npk-n').value;
    const npkP = document.getElementById('npk-p').value;
    const npkK = document.getElementById('npk-k').value;

    if (!farmName || !cropType || !landArea || !sowingDate || !soilType) {
        alert('Please fill in all farm details.'); return;
    }
    if (!currentUserId) {
        alert('User not logged in. Please login first.'); return;
    }

    const newFarmData = { 
        user_id: currentUserId, // Phone Number
        farm_name: farmName, 
        sowing_date: sowingDate, 
        crop_type: cropType, 
        land_area: parseFloat(landArea),
        soil_type: soilType,
        npk_n: parseFloat(npkN),
        npk_p: parseFloat(npkP),
        npk_k: parseFloat(npkK),
        farm_latitude: userLocation.lat,
        farm_longitude: userLocation.lon
    };

    const { data, error } = await supabase
        .from('farms')
        .insert([newFarmData])
        .select(); 

    if (error) {
        console.error('Supabase Save Farm Error:', error.message);
        alert('Failed to save farm. Please try again.');
        return;
    }
    
    const savedFarm = data[0]; 
    viewFarmReport(savedFarm); 
}

async function renderFarms() {
    const farmListContainer = document.getElementById('farm-list');
    farmListContainer.innerHTML = '';
    const T = translations[currentLang] || translations['en'];

    if (!currentUserId) return;

    const { data: farms, error } = await supabase
        .from('farms')
        .select('*')
        .eq('user_id', currentUserId)
        .order('id', { ascending: false });

    if (error) {
        console.error('Supabase Fetch Farms Error:', error.message);
        farmListContainer.innerHTML = `<div class="no-farms"><p>Error fetching farms.</p></div>`;
        return;
    }

    if (farms.length === 0) {
        farmListContainer.innerHTML = `<div class="no-farms"><p>${T.noFarms}</p></div>`;
    } else {
        farms.forEach(farm => {
            const farmCard = document.createElement('div');
            farmCard.className = 'farm-card';
            farmCard.onclick = () => viewFarmReport(farm); 
            const deleteBtnText = T.deleteBtn;
            farmCard.innerHTML = `
                <div class="farm-card-header">
                    <h4>${farm.farm_name}</h4>
                    <button class="delete-btn" onclick="event.stopPropagation(); deleteFarm(${farm.id});">${deleteBtnText}</button>
                </div>
                <p>Crop: ${farm.crop_type} | Area: ${farm.land_area} acres</p>
                <p>Sowing Date: ${farm.sowing_date}</p>`;
            farmListContainer.appendChild(farmCard);
        });
    }
}

function viewFarmReport(farm) {
    if (!farm) return;

    const reportScreen = document.getElementById('report-screen');
    const T = translations[currentLang] || translations['en'];
    
    // Simple example logic for yield prediction based on crop type
    const predictedYield = farm.crop_type === 'Rice' ? '35 quintal/acre' : '25 quintal/acre';

    reportScreen.innerHTML = `
        <div class="report-section">
            <h3 data-translate-key="statusReport">${T.statusReport}</h3>
            <p data-translate-key="reportFor" style="font-weight: 500;">${T.reportFor} <span style="color: var(--primary-green);">${farm.farm_name}</span></p>
            <hr style="margin: 10px 0;">
            <p data-translate-key="predictedYield">${T.predictedYield}</p>
            <h2 class="predicted-yield">${predictedYield}</h2>
        </div>
        
        <div class="report-section">
            <h3 data-translate-key="issues">${T.issues}</h3>
            <div class="issue">${T.issueNitrogen}</div>
            <div class="issue">${T.issueHumidity}</div>
        </div>

        <div class="report-section">
            <h3 data-translate-key="recommendations">${T.recommendations}</h3>
            <div class="recommendation-cards">
                <div class="rec-card">
                    <h4>${T.recUreaTitle}</h4>
                    <p>${T.recUreaDesc}</p>
                    <span class="yield-increase">${T.recUreaYield}</span>
                </div>
                <div class="rec-card">
                    <h4>${T.recIrrigateTitle}</h4>
                    <p>${T.recIrrigateDesc}</p>
                    <span class="yield-increase">${T.recIrrigateYield}</span>
                </div>
                <div class="rec-card">
                    <h4>${T.recNeemTitle}</h4>
                    <p>${T.recNeemDesc}</p>
                    <span class="yield-increase">${T.recNeemYield}</span>
                </div>
            </div>
        </div>
        
        <button class="btn" onclick="showScreen('dashboard-screen')" data-translate-key="backToDashboard">${T.backToDashboard}</button>
    `;
    showScreen('report-screen');
}

async function deleteFarm(farmId) {
    const confirmText = translations[currentLang].confirmDelete;
    if (confirm(confirmText)) {
        const { error } = await supabase
            .from('farms')
            .delete()
            .eq('id', farmId);

        if (error) {
            console.error('Supabase Delete Farm Error:', error.message);
            alert('Failed to delete farm. Please try again.');
            return;
        }
        renderFarms();
    }
}

// --- INITIALIZATION ---

document.addEventListener('DOMContentLoaded', () => {
    // 1. Initialize Supabase
    if (typeof window.supabase !== 'undefined' && typeof window.supabase.createClient === 'function') {
        supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    } else {
        console.error("FATAL ERROR: Supabase library not loaded.");
    }

    // 2. Set Language and Initial Screen
    const savedLang = localStorage.getItem('language') || 'en';
    setLanguage(savedLang);
    showScreen('language-screen');
    
    // 3. Set up event listeners for inputs
    const soilTypeElement = document.getElementById('soil-type');
    if (soilTypeElement) {
         soilTypeElement.addEventListener('change', autofillNpk);
    }
    // Location listeners are already set in the HTML with onclick="getLocation()"
});